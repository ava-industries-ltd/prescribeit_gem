=begin
#PrescribeIT SDK REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 5.0.27

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.53
=end

require 'date'

module PrescribeItClient
  class MedicationDispense
    attr_accessor :id

    attr_accessor :medication_info

    attr_accessor :remaining_quantity

    attr_accessor :rendered_dosage_instruction

    attr_accessor :quantity

    attr_accessor :days_supply

    attr_accessor :when_prepared

    attr_accessor :reference_medication_order

    attr_accessor :dosage_instructions

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'medication_info' => :'medicationInfo',
        :'remaining_quantity' => :'remainingQuantity',
        :'rendered_dosage_instruction' => :'renderedDosageInstruction',
        :'quantity' => :'quantity',
        :'days_supply' => :'daysSupply',
        :'when_prepared' => :'whenPrepared',
        :'reference_medication_order' => :'referenceMedicationOrder',
        :'dosage_instructions' => :'dosageInstructions'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Object',
        :'medication_info' => :'Object',
        :'remaining_quantity' => :'Object',
        :'rendered_dosage_instruction' => :'Object',
        :'quantity' => :'Object',
        :'days_supply' => :'Object',
        :'when_prepared' => :'Object',
        :'reference_medication_order' => :'Object',
        :'dosage_instructions' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `PrescribeItClient::MedicationDispense` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `PrescribeItClient::MedicationDispense`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'medication_info')
        self.medication_info = attributes[:'medication_info']
      end

      if attributes.key?(:'remaining_quantity')
        self.remaining_quantity = attributes[:'remaining_quantity']
      end

      if attributes.key?(:'rendered_dosage_instruction')
        self.rendered_dosage_instruction = attributes[:'rendered_dosage_instruction']
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.key?(:'days_supply')
        self.days_supply = attributes[:'days_supply']
      end

      if attributes.key?(:'when_prepared')
        self.when_prepared = attributes[:'when_prepared']
      end

      if attributes.key?(:'reference_medication_order')
        self.reference_medication_order = attributes[:'reference_medication_order']
      end

      if attributes.key?(:'dosage_instructions')
        if (value = attributes[:'dosage_instructions']).is_a?(Array)
          self.dosage_instructions = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @medication_info.nil?
        invalid_properties.push('invalid value for "medication_info", medication_info cannot be nil.')
      end

      if @remaining_quantity.nil?
        invalid_properties.push('invalid value for "remaining_quantity", remaining_quantity cannot be nil.')
      end

      if @rendered_dosage_instruction.nil?
        invalid_properties.push('invalid value for "rendered_dosage_instruction", rendered_dosage_instruction cannot be nil.')
      end

      if @quantity.nil?
        invalid_properties.push('invalid value for "quantity", quantity cannot be nil.')
      end

      if @days_supply.nil?
        invalid_properties.push('invalid value for "days_supply", days_supply cannot be nil.')
      end

      if @when_prepared.nil?
        invalid_properties.push('invalid value for "when_prepared", when_prepared cannot be nil.')
      end

      if @reference_medication_order.nil?
        invalid_properties.push('invalid value for "reference_medication_order", reference_medication_order cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @medication_info.nil?
      return false if @remaining_quantity.nil?
      return false if @rendered_dosage_instruction.nil?
      return false if @quantity.nil?
      return false if @days_supply.nil?
      return false if @when_prepared.nil?
      return false if @reference_medication_order.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          medication_info == o.medication_info &&
          remaining_quantity == o.remaining_quantity &&
          rendered_dosage_instruction == o.rendered_dosage_instruction &&
          quantity == o.quantity &&
          days_supply == o.days_supply &&
          when_prepared == o.when_prepared &&
          reference_medication_order == o.reference_medication_order &&
          dosage_instructions == o.dosage_instructions
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, medication_info, remaining_quantity, rendered_dosage_instruction, quantity, days_supply, when_prepared, reference_medication_order, dosage_instructions].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        PrescribeItClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
