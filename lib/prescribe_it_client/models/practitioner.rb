=begin
#PrescribeIT SDK REST API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 5.0.27

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.4.0-SNAPSHOT

=end

require 'date'
require 'time'

module PrescribeItClient
  class Practitioner < CommunicationEntity
    attr_accessor :id

    attr_accessor :token

    attr_accessor :communication

    attr_accessor :license_number

    attr_accessor :contact_list

    attr_accessor :role

    attr_accessor :specialty

    attr_accessor :services_offered

    attr_accessor :organizations

    attr_accessor :first_name

    attr_accessor :middle_name

    attr_accessor :last_name

    attr_accessor :name_prefix

    attr_accessor :name_suffix

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'token' => :'token',
        :'communication' => :'communication',
        :'license_number' => :'licenseNumber',
        :'contact_list' => :'contactList',
        :'role' => :'role',
        :'specialty' => :'specialty',
        :'services_offered' => :'servicesOffered',
        :'organizations' => :'organizations',
        :'first_name' => :'firstName',
        :'middle_name' => :'middleName',
        :'last_name' => :'lastName',
        :'name_prefix' => :'namePrefix',
        :'name_suffix' => :'nameSuffix'
      }
    end

    # Returns all the JSON keys this model knows about, including the ones defined in its parent(s)
    def self.acceptable_attributes
      attribute_map.values.concat(superclass.acceptable_attributes)
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'token' => :'String',
        :'communication' => :'Array<SharedCommunicationLanguageHolder>',
        :'license_number' => :'PractitionerLicense',
        :'contact_list' => :'Array<ContactInfo>',
        :'role' => :'SharedPractitionerRoleHolder',
        :'specialty' => :'Array<PractitionerSpecialtyHolder>',
        :'services_offered' => :'Array<CommunicationService>',
        :'organizations' => :'Array<Organization>',
        :'first_name' => :'String',
        :'middle_name' => :'String',
        :'last_name' => :'String',
        :'name_prefix' => :'String',
        :'name_suffix' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'CommunicationEntity'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `PrescribeItClient::Practitioner` initialize method"
      end

      attributes = attributes.each_with_object({}) { |(k, v), h|
        symbolized_key = k.to_sym
        unless acceptable_attributes.include?(symbolized_key)
          fail ArgumentError, "`#{k}` is not a valid attribute in `PrescribeItClient::Practitioner`. Please check the name to make sure it's valid. List of attributes: " + combined_attributes.keys.inspect
        end
        h[symbolized_key] = v
      }

      # call parent's initialize with combined attributes
      parent_attribute_keys = self.class.superclass.attribute_map.keys
      filtered_parent_attributes = attributes.slice(*parent_attribute_keys.map(&:to_sym))
      super(filtered_parent_attributes)

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'token')
        self.token = attributes[:'token']
      end

      if attributes.key?(:'communication')
        if (value = attributes[:'communication']).is_a?(Array)
          self.communication = value
        end
      else
        self.communication = nil
      end

      if attributes.key?(:'license_number')
        self.license_number = attributes[:'license_number']
      end

      if attributes.key?(:'contact_list')
        if (value = attributes[:'contact_list']).is_a?(Array)
          self.contact_list = value
        end
      end

      if attributes.key?(:'role')
        self.role = attributes[:'role']
      end

      if attributes.key?(:'specialty')
        if (value = attributes[:'specialty']).is_a?(Array)
          self.specialty = value
        end
      end

      if attributes.key?(:'services_offered')
        if (value = attributes[:'services_offered']).is_a?(Array)
          self.services_offered = value
        end
      end

      if attributes.key?(:'organizations')
        if (value = attributes[:'organizations']).is_a?(Array)
          self.organizations = value
        end
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      else
        self.first_name = nil
      end

      if attributes.key?(:'middle_name')
        self.middle_name = attributes[:'middle_name']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      else
        self.last_name = nil
      end

      if attributes.key?(:'name_prefix')
        self.name_prefix = attributes[:'name_prefix']
      end

      if attributes.key?(:'name_suffix')
        self.name_suffix = attributes[:'name_suffix']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = super
      if @communication.nil?
        invalid_properties.push('invalid value for "communication", communication cannot be nil.')
      end

      if @first_name.nil?
        invalid_properties.push('invalid value for "first_name", first_name cannot be nil.')
      end

      if @last_name.nil?
        invalid_properties.push('invalid value for "last_name", last_name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @communication.nil?
      return false if @first_name.nil?
      return false if @last_name.nil?
      true && super
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          token == o.token &&
          communication == o.communication &&
          license_number == o.license_number &&
          contact_list == o.contact_list &&
          role == o.role &&
          specialty == o.specialty &&
          services_offered == o.services_offered &&
          organizations == o.organizations &&
          first_name == o.first_name &&
          middle_name == o.middle_name &&
          last_name == o.last_name &&
          name_prefix == o.name_prefix &&
          name_suffix == o.name_suffix && super(o)
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, token, communication, license_number, contact_list, role, specialty, services_offered, organizations, first_name, middle_name, last_name, name_prefix, name_suffix].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      super(attributes)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = PrescribeItClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = super
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
