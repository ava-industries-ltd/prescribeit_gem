=begin
#PrescribeIT SDK REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 5.0.27

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.53
=end

require 'date'

module PrescribeItClient
  class CancelMedicationOrder
    attr_accessor :cancel_reason

    attr_accessor :cancel_reason_description

    attr_accessor :original_prescriber

    attr_accessor :id

    attr_accessor :dosage_instructions

    attr_accessor :dispense_request

    attr_accessor :medication_info

    attr_accessor :rendered_dosage_instruction

    attr_accessor :dis_ids

    attr_accessor :treatment_type

    attr_accessor :category

    attr_accessor :detected_issues

    attr_accessor :pharmacy_instructions

    attr_accessor :over25dur

    attr_accessor :monitored_drug

    attr_accessor :no_renewals

    attr_accessor :reason_codes

    attr_accessor :note

    attr_accessor :date_written

    attr_accessor :is_high_priority

    attr_accessor :do_not_autofill

    attr_accessor :task_id

    attr_accessor :prior_prescription_id

    attr_accessor :type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cancel_reason' => :'cancelReason',
        :'cancel_reason_description' => :'cancelReasonDescription',
        :'original_prescriber' => :'originalPrescriber',
        :'id' => :'id',
        :'dosage_instructions' => :'dosageInstructions',
        :'dispense_request' => :'dispenseRequest',
        :'medication_info' => :'medicationInfo',
        :'rendered_dosage_instruction' => :'renderedDosageInstruction',
        :'dis_ids' => :'disIds',
        :'treatment_type' => :'treatmentType',
        :'category' => :'category',
        :'detected_issues' => :'detectedIssues',
        :'pharmacy_instructions' => :'pharmacyInstructions',
        :'over25dur' => :'over25dur',
        :'monitored_drug' => :'monitoredDrug',
        :'no_renewals' => :'noRenewals',
        :'reason_codes' => :'reasonCodes',
        :'note' => :'note',
        :'date_written' => :'dateWritten',
        :'is_high_priority' => :'isHighPriority',
        :'do_not_autofill' => :'doNotAutofill',
        :'task_id' => :'taskId',
        :'prior_prescription_id' => :'priorPrescriptionId',
        :'type' => :'type'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'cancel_reason' => :'',
        :'cancel_reason_description' => :'',
        :'original_prescriber' => :'',
        :'id' => :'',
        :'dosage_instructions' => :'',
        :'dispense_request' => :'',
        :'medication_info' => :'',
        :'rendered_dosage_instruction' => :'',
        :'dis_ids' => :'',
        :'treatment_type' => :'',
        :'category' => :'',
        :'detected_issues' => :'',
        :'pharmacy_instructions' => :'',
        :'over25dur' => :'',
        :'monitored_drug' => :'',
        :'no_renewals' => :'',
        :'reason_codes' => :'',
        :'note' => :'',
        :'date_written' => :'',
        :'is_high_priority' => :'',
        :'do_not_autofill' => :'',
        :'task_id' => :'',
        :'prior_prescription_id' => :'',
        :'type' => :''
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'over25dur',
        :'monitored_drug',
        :'no_renewals',
        :'is_high_priority',
        :'do_not_autofill',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `PrescribeItClient::CancelMedicationOrder` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `PrescribeItClient::CancelMedicationOrder`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      # call parent's initialize
      super(attributes)

      if attributes.key?(:'cancel_reason')
        self.cancel_reason = attributes[:'cancel_reason']
      end

      if attributes.key?(:'cancel_reason_description')
        self.cancel_reason_description = attributes[:'cancel_reason_description']
      end

      if attributes.key?(:'original_prescriber')
        self.original_prescriber = attributes[:'original_prescriber']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'dosage_instructions')
        if (value = attributes[:'dosage_instructions']).is_a?(Array)
          self.dosage_instructions = value
        end
      end

      if attributes.key?(:'dispense_request')
        self.dispense_request = attributes[:'dispense_request']
      end

      if attributes.key?(:'medication_info')
        self.medication_info = attributes[:'medication_info']
      end

      if attributes.key?(:'rendered_dosage_instruction')
        self.rendered_dosage_instruction = attributes[:'rendered_dosage_instruction']
      end

      if attributes.key?(:'dis_ids')
        if (value = attributes[:'dis_ids']).is_a?(Array)
          self.dis_ids = value
        end
      end

      if attributes.key?(:'treatment_type')
        self.treatment_type = attributes[:'treatment_type']
      end

      if attributes.key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.key?(:'detected_issues')
        if (value = attributes[:'detected_issues']).is_a?(Array)
          self.detected_issues = value
        end
      end

      if attributes.key?(:'pharmacy_instructions')
        self.pharmacy_instructions = attributes[:'pharmacy_instructions']
      end

      if attributes.key?(:'over25dur')
        self.over25dur = attributes[:'over25dur']
      end

      if attributes.key?(:'monitored_drug')
        self.monitored_drug = attributes[:'monitored_drug']
      end

      if attributes.key?(:'no_renewals')
        self.no_renewals = attributes[:'no_renewals']
      end

      if attributes.key?(:'reason_codes')
        if (value = attributes[:'reason_codes']).is_a?(Array)
          self.reason_codes = value
        end
      end

      if attributes.key?(:'note')
        self.note = attributes[:'note']
      end

      if attributes.key?(:'date_written')
        self.date_written = attributes[:'date_written']
      end

      if attributes.key?(:'is_high_priority')
        self.is_high_priority = attributes[:'is_high_priority']
      end

      if attributes.key?(:'do_not_autofill')
        self.do_not_autofill = attributes[:'do_not_autofill']
      end

      if attributes.key?(:'task_id')
        self.task_id = attributes[:'task_id']
      end

      if attributes.key?(:'prior_prescription_id')
        self.prior_prescription_id = attributes[:'prior_prescription_id']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = super
      if @cancel_reason.nil?
        invalid_properties.push('invalid value for "cancel_reason", cancel_reason cannot be nil.')
      end

      if @original_prescriber.nil?
        invalid_properties.push('invalid value for "original_prescriber", original_prescriber cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @dispense_request.nil?
        invalid_properties.push('invalid value for "dispense_request", dispense_request cannot be nil.')
      end

      if @medication_info.nil?
        invalid_properties.push('invalid value for "medication_info", medication_info cannot be nil.')
      end

      if @rendered_dosage_instruction.nil?
        invalid_properties.push('invalid value for "rendered_dosage_instruction", rendered_dosage_instruction cannot be nil.')
      end

      if @date_written.nil?
        invalid_properties.push('invalid value for "date_written", date_written cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @cancel_reason.nil?
      return false if @original_prescriber.nil?
      return false if @id.nil?
      return false if @dispense_request.nil?
      return false if @medication_info.nil?
      return false if @rendered_dosage_instruction.nil?
      return false if @date_written.nil?
      return false if @type.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cancel_reason == o.cancel_reason &&
          cancel_reason_description == o.cancel_reason_description &&
          original_prescriber == o.original_prescriber &&
          id == o.id &&
          dosage_instructions == o.dosage_instructions &&
          dispense_request == o.dispense_request &&
          medication_info == o.medication_info &&
          rendered_dosage_instruction == o.rendered_dosage_instruction &&
          dis_ids == o.dis_ids &&
          treatment_type == o.treatment_type &&
          category == o.category &&
          detected_issues == o.detected_issues &&
          pharmacy_instructions == o.pharmacy_instructions &&
          over25dur == o.over25dur &&
          monitored_drug == o.monitored_drug &&
          no_renewals == o.no_renewals &&
          reason_codes == o.reason_codes &&
          note == o.note &&
          date_written == o.date_written &&
          is_high_priority == o.is_high_priority &&
          do_not_autofill == o.do_not_autofill &&
          task_id == o.task_id &&
          prior_prescription_id == o.prior_prescription_id &&
          type == o.type && super(o)
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [cancel_reason, cancel_reason_description, original_prescriber, id, dosage_instructions, dispense_request, medication_info, rendered_dosage_instruction, dis_ids, treatment_type, category, detected_issues, pharmacy_instructions, over25dur, monitored_drug, no_renewals, reason_codes, note, date_written, is_high_priority, do_not_autofill, task_id, prior_prescription_id, type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      super(attributes)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        PrescribeItClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = super
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
