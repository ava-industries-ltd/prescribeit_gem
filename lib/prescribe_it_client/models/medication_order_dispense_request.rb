=begin
#PrescribeIT SDK REST API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 5.0.27

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.4.0-SNAPSHOT

=end

require 'date'
require 'time'

module PrescribeItClient
  class MedicationOrderDispenseRequest
    attr_accessor :dispense_interval_days

    attr_accessor :trial_eligibility

    attr_accessor :fill_instruction

    attr_accessor :max_dispense

    attr_accessor :total_prescribed_quantity

    attr_accessor :total_days_supply

    attr_accessor :validity_period

    attr_accessor :number_of_repeats_allowed

    attr_accessor :quantity

    attr_accessor :expected_supply_duration_days

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'dispense_interval_days' => :'dispenseIntervalDays',
        :'trial_eligibility' => :'trialEligibility',
        :'fill_instruction' => :'fillInstruction',
        :'max_dispense' => :'maxDispense',
        :'total_prescribed_quantity' => :'totalPrescribedQuantity',
        :'total_days_supply' => :'totalDaysSupply',
        :'validity_period' => :'validityPeriod',
        :'number_of_repeats_allowed' => :'numberOfRepeatsAllowed',
        :'quantity' => :'quantity',
        :'expected_supply_duration_days' => :'expectedSupplyDurationDays'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'dispense_interval_days' => :'Float',
        :'trial_eligibility' => :'Boolean',
        :'fill_instruction' => :'FirstFillInstruction',
        :'max_dispense' => :'Quantity',
        :'total_prescribed_quantity' => :'Quantity',
        :'total_days_supply' => :'Float',
        :'validity_period' => :'Period',
        :'number_of_repeats_allowed' => :'Integer',
        :'quantity' => :'Quantity',
        :'expected_supply_duration_days' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'dispense_interval_days',
        :'trial_eligibility',
        :'total_days_supply',
        :'number_of_repeats_allowed',
        :'expected_supply_duration_days'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `PrescribeItClient::MedicationOrderDispenseRequest` initialize method"
      end

      attributes = attributes.each_with_object({}) { |(k, v), h|
        symbolized_key = k.to_sym
        unless self.class.acceptable_attributes.include?(symbolized_key)
          fail ArgumentError, "`#{k}` is not a valid attribute in `PrescribeItClient::MedicationOrderDispenseRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.acceptable_attributes.inspect
        end
        h[symbolized_key] = v
      }


      if attributes.key?(:'dispense_interval_days')
        self.dispense_interval_days = attributes[:'dispense_interval_days']
      end

      if attributes.key?(:'trial_eligibility')
        self.trial_eligibility = attributes[:'trial_eligibility']
      end

      if attributes.key?(:'fill_instruction')
        self.fill_instruction = attributes[:'fill_instruction']
      end

      if attributes.key?(:'max_dispense')
        self.max_dispense = attributes[:'max_dispense']
      end

      if attributes.key?(:'total_prescribed_quantity')
        self.total_prescribed_quantity = attributes[:'total_prescribed_quantity']
      end

      if attributes.key?(:'total_days_supply')
        self.total_days_supply = attributes[:'total_days_supply']
      end

      if attributes.key?(:'validity_period')
        self.validity_period = attributes[:'validity_period']
      else
        self.validity_period = nil
      end

      if attributes.key?(:'number_of_repeats_allowed')
        self.number_of_repeats_allowed = attributes[:'number_of_repeats_allowed']
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.key?(:'expected_supply_duration_days')
        self.expected_supply_duration_days = attributes[:'expected_supply_duration_days']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @validity_period.nil?
        invalid_properties.push('invalid value for "validity_period", validity_period cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @validity_period.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          dispense_interval_days == o.dispense_interval_days &&
          trial_eligibility == o.trial_eligibility &&
          fill_instruction == o.fill_instruction &&
          max_dispense == o.max_dispense &&
          total_prescribed_quantity == o.total_prescribed_quantity &&
          total_days_supply == o.total_days_supply &&
          validity_period == o.validity_period &&
          number_of_repeats_allowed == o.number_of_repeats_allowed &&
          quantity == o.quantity &&
          expected_supply_duration_days == o.expected_supply_duration_days
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [dispense_interval_days, trial_eligibility, fill_instruction, max_dispense, total_prescribed_quantity, total_days_supply, validity_period, number_of_repeats_allowed, quantity, expected_supply_duration_days].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = PrescribeItClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
