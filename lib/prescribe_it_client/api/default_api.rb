=begin
#PrescribeIT SDK REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 5.0.27

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.53
=end

module PrescribeItClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [TransportResponse]
    def emr_acknowledge_post(opts = {})
      data, _status_code, _headers = emr_acknowledge_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def emr_acknowledge_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.emr_acknowledge_post ...'
      end
      # resource path
      local_var_path = '/emr/acknowledge'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#emr_acknowledge_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id 
    # @option opts [String] :content_type 
    # @option opts [String] :file 
    # @return [TransportResponse]
    def emr_attachment_upload_post(opts = {})
      data, _status_code, _headers = emr_attachment_upload_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :id 
    # @option opts [String] :content_type 
    # @option opts [String] :file 
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def emr_attachment_upload_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.emr_attachment_upload_post ...'
      end
      # resource path
      local_var_path = '/emr/attachment-upload'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['id'] = opts[:'id'] if !opts[:'id'].nil?
      form_params['contentType'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#emr_attachment_upload_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [FormularyRequestParameters] :body 
    # @return [TransportResponse]
    def emr_formulary_request_post(opts = {})
      data, _status_code, _headers = emr_formulary_request_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [FormularyRequestParameters] :body 
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def emr_formulary_request_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.emr_formulary_request_post ...'
      end
      # resource path
      local_var_path = '/emr/formulary-request'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#emr_formulary_request_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [TransportResponse]
    def emr_poll_inbox_get(opts = {})
      data, _status_code, _headers = emr_poll_inbox_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def emr_poll_inbox_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.emr_poll_inbox_get ...'
      end
      # resource path
      local_var_path = '/emr/poll-inbox'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#emr_poll_inbox_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [PharmacyBulkSearchByFaxParameters] :body 
    # @return [TransportResponse]
    def emr_registry_search_organization_bulk_by_fax_post(opts = {})
      data, _status_code, _headers = emr_registry_search_organization_bulk_by_fax_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PharmacyBulkSearchByFaxParameters] :body 
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def emr_registry_search_organization_bulk_by_fax_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.emr_registry_search_organization_bulk_by_fax_post ...'
      end
      # resource path
      local_var_path = '/emr/registry-search/organization-bulk-by-fax'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#emr_registry_search_organization_bulk_by_fax_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [PharmacyBulkSearchByIdParameters] :body 
    # @return [TransportResponse]
    def emr_registry_search_organization_bulk_by_ids_post(opts = {})
      data, _status_code, _headers = emr_registry_search_organization_bulk_by_ids_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PharmacyBulkSearchByIdParameters] :body 
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def emr_registry_search_organization_bulk_by_ids_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.emr_registry_search_organization_bulk_by_ids_post ...'
      end
      # resource path
      local_var_path = '/emr/registry-search/organization-bulk-by-ids'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#emr_registry_search_organization_bulk_by_ids_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [EmrRegistrySearchOrganizationByIdQueryParameters] :body 
    # @return [TransportResponse]
    def emr_registry_search_organization_by_id_post(opts = {})
      data, _status_code, _headers = emr_registry_search_organization_by_id_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [EmrRegistrySearchOrganizationByIdQueryParameters] :body 
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def emr_registry_search_organization_by_id_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.emr_registry_search_organization_by_id_post ...'
      end
      # resource path
      local_var_path = '/emr/registry-search/organization-by-id'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#emr_registry_search_organization_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [EmrRegistrySearchOrganizationDiscreteQueryParameters] :body 
    # @return [TransportResponse]
    def emr_registry_search_organization_discrete_post(opts = {})
      data, _status_code, _headers = emr_registry_search_organization_discrete_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [EmrRegistrySearchOrganizationDiscreteQueryParameters] :body 
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def emr_registry_search_organization_discrete_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.emr_registry_search_organization_discrete_post ...'
      end
      # resource path
      local_var_path = '/emr/registry-search/organization-discrete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#emr_registry_search_organization_discrete_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [EmrRegistrySearchOrganizationElasticQueryParameters] :body 
    # @return [TransportResponse]
    def emr_registry_search_organization_elastic_post(opts = {})
      data, _status_code, _headers = emr_registry_search_organization_elastic_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [EmrRegistrySearchOrganizationElasticQueryParameters] :body 
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def emr_registry_search_organization_elastic_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.emr_registry_search_organization_elastic_post ...'
      end
      # resource path
      local_var_path = '/emr/registry-search/organization-elastic'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#emr_registry_search_organization_elastic_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [EmrRegistrySearchPractitionerByIdQueryParameters] :body 
    # @return [TransportResponse]
    def emr_registry_search_practitioner_by_id_post(opts = {})
      data, _status_code, _headers = emr_registry_search_practitioner_by_id_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [EmrRegistrySearchPractitionerByIdQueryParameters] :body 
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def emr_registry_search_practitioner_by_id_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.emr_registry_search_practitioner_by_id_post ...'
      end
      # resource path
      local_var_path = '/emr/registry-search/practitioner-by-id'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#emr_registry_search_practitioner_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [EmrRegistrySearchPractitionerDiscreteQueryParameters] :body 
    # @return [TransportResponse]
    def emr_registry_search_practitioner_discrete_post(opts = {})
      data, _status_code, _headers = emr_registry_search_practitioner_discrete_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [EmrRegistrySearchPractitionerDiscreteQueryParameters] :body 
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def emr_registry_search_practitioner_discrete_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.emr_registry_search_practitioner_discrete_post ...'
      end
      # resource path
      local_var_path = '/emr/registry-search/practitioner-discrete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#emr_registry_search_practitioner_discrete_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [EmrRegistrySearchPractitionerElasticQueryParameters] :body 
    # @return [TransportResponse]
    def emr_registry_search_practitioner_elastic_post(opts = {})
      data, _status_code, _headers = emr_registry_search_practitioner_elastic_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [EmrRegistrySearchPractitionerElasticQueryParameters] :body 
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def emr_registry_search_practitioner_elastic_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.emr_registry_search_practitioner_elastic_post ...'
      end
      # resource path
      local_var_path = '/emr/registry-search/practitioner-elastic'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#emr_registry_search_practitioner_elastic_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [RequestOtpParameters] :body 
    # @return [TransportResponse]
    def emr_request_otp_post(opts = {})
      data, _status_code, _headers = emr_request_otp_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [RequestOtpParameters] :body 
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def emr_request_otp_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.emr_request_otp_post ...'
      end
      # resource path
      local_var_path = '/emr/request-otp'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#emr_request_otp_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [RequestSamlTokenParameters] :body 
    # @return [TransportResponse]
    def emr_request_saml_token_post(opts = {})
      data, _status_code, _headers = emr_request_saml_token_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [RequestSamlTokenParameters] :body 
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def emr_request_saml_token_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.emr_request_saml_token_post ...'
      end
      # resource path
      local_var_path = '/emr/request-saml-token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#emr_request_saml_token_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [RequestSamlTokenWithExternalTokenParameters] :body 
    # @return [TransportResponse]
    def emr_request_saml_token_with_ext_token_post(opts = {})
      data, _status_code, _headers = emr_request_saml_token_with_ext_token_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [RequestSamlTokenWithExternalTokenParameters] :body 
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def emr_request_saml_token_with_ext_token_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.emr_request_saml_token_with_ext_token_post ...'
      end
      # resource path
      local_var_path = '/emr/request-saml-token-with-ext-token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#emr_request_saml_token_with_ext_token_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [TransportResponse]
    def emr_submit_to_inbox_post(opts = {})
      data, _status_code, _headers = emr_submit_to_inbox_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def emr_submit_to_inbox_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.emr_submit_to_inbox_post ...'
      end
      # resource path
      local_var_path = '/emr/submit-to-inbox'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#emr_submit_to_inbox_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [Formulary]
    def emr_transform_from_xml_formulary_post(opts = {})
      data, _status_code, _headers = emr_transform_from_xml_formulary_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [Array<(Formulary, Integer, Hash)>] Formulary data, response status code and response headers
    def emr_transform_from_xml_formulary_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.emr_transform_from_xml_formulary_post ...'
      end
      # resource path
      local_var_path = '/emr/transform-from-xml/formulary'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'Formulary' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#emr_transform_from_xml_formulary_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [NotificationMessageIssue]
    def emr_transform_from_xml_notification_post(opts = {})
      data, _status_code, _headers = emr_transform_from_xml_notification_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [Array<(NotificationMessageIssue, Integer, Hash)>] NotificationMessageIssue data, response status code and response headers
    def emr_transform_from_xml_notification_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.emr_transform_from_xml_notification_post ...'
      end
      # resource path
      local_var_path = '/emr/transform-from-xml/notification'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'NotificationMessageIssue' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#emr_transform_from_xml_notification_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [InboxMessageResponse]
    def emr_transform_from_xml_post(opts = {})
      data, _status_code, _headers = emr_transform_from_xml_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [Array<(InboxMessageResponse, Integer, Hash)>] InboxMessageResponse data, response status code and response headers
    def emr_transform_from_xml_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.emr_transform_from_xml_post ...'
      end
      # resource path
      local_var_path = '/emr/transform-from-xml'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'InboxMessageResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#emr_transform_from_xml_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [ProviderRegistrySearchResponse]
    def emr_transform_from_xml_search_post(opts = {})
      data, _status_code, _headers = emr_transform_from_xml_search_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [Array<(ProviderRegistrySearchResponse, Integer, Hash)>] ProviderRegistrySearchResponse data, response status code and response headers
    def emr_transform_from_xml_search_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.emr_transform_from_xml_search_post ...'
      end
      # resource path
      local_var_path = '/emr/transform-from-xml/search'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'ProviderRegistrySearchResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#emr_transform_from_xml_search_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :body 
    # @return [String]
    def emr_transform_to_xml_acknowledgment_post(opts = {})
      data, _status_code, _headers = emr_transform_to_xml_acknowledgment_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :body 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def emr_transform_to_xml_acknowledgment_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.emr_transform_to_xml_acknowledgment_post ...'
      end
      # resource path
      local_var_path = '/emr/transform-to-xml/acknowledgment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#emr_transform_to_xml_acknowledgment_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [ClinicianCommunication] :body 
    # @return [String]
    def emr_transform_to_xml_clinician_communication_post(opts = {})
      data, _status_code, _headers = emr_transform_to_xml_clinician_communication_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [ClinicianCommunication] :body 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def emr_transform_to_xml_clinician_communication_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.emr_transform_to_xml_clinician_communication_post ...'
      end
      # resource path
      local_var_path = '/emr/transform-to-xml/clinician-communication'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#emr_transform_to_xml_clinician_communication_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [EmrCancelRequest] :body 
    # @return [String]
    def emr_transform_to_xml_emr_cancel_request_post(opts = {})
      data, _status_code, _headers = emr_transform_to_xml_emr_cancel_request_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [EmrCancelRequest] :body 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def emr_transform_to_xml_emr_cancel_request_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.emr_transform_to_xml_emr_cancel_request_post ...'
      end
      # resource path
      local_var_path = '/emr/transform-to-xml/emr-cancel-request'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#emr_transform_to_xml_emr_cancel_request_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [EmrDeferredRequest] :body 
    # @return [String]
    def emr_transform_to_xml_emr_deferred_request_post(opts = {})
      data, _status_code, _headers = emr_transform_to_xml_emr_deferred_request_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [EmrDeferredRequest] :body 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def emr_transform_to_xml_emr_deferred_request_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.emr_transform_to_xml_emr_deferred_request_post ...'
      end
      # resource path
      local_var_path = '/emr/transform-to-xml/emr-deferred-request'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#emr_transform_to_xml_emr_deferred_request_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [EmrRequest] :body 
    # @return [String]
    def emr_transform_to_xml_emr_request_post(opts = {})
      data, _status_code, _headers = emr_transform_to_xml_emr_request_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [EmrRequest] :body 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def emr_transform_to_xml_emr_request_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.emr_transform_to_xml_emr_request_post ...'
      end
      # resource path
      local_var_path = '/emr/transform-to-xml/emr-request'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#emr_transform_to_xml_emr_request_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [NotificationMessage] :body 
    # @return [String]
    def emr_transform_to_xml_notification_message_post(opts = {})
      data, _status_code, _headers = emr_transform_to_xml_notification_message_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [NotificationMessage] :body 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def emr_transform_to_xml_notification_message_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.emr_transform_to_xml_notification_message_post ...'
      end
      # resource path
      local_var_path = '/emr/transform-to-xml/notification-message'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#emr_transform_to_xml_notification_message_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [AcknowledgeDeferredParameters] :body 
    # @return [TransportResponse]
    def pms_acknowledge_deferred_post(opts = {})
      data, _status_code, _headers = pms_acknowledge_deferred_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [AcknowledgeDeferredParameters] :body 
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def pms_acknowledge_deferred_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pms_acknowledge_deferred_post ...'
      end
      # resource path
      local_var_path = '/pms/acknowledge-deferred'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pms_acknowledge_deferred_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [TransportResponse]
    def pms_acknowledge_post(opts = {})
      data, _status_code, _headers = pms_acknowledge_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def pms_acknowledge_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pms_acknowledge_post ...'
      end
      # resource path
      local_var_path = '/pms/acknowledge'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pms_acknowledge_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id 
    # @option opts [String] :content_type 
    # @option opts [String] :file 
    # @return [TransportResponse]
    def pms_attachment_upload_post(opts = {})
      data, _status_code, _headers = pms_attachment_upload_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :id 
    # @option opts [String] :content_type 
    # @option opts [String] :file 
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def pms_attachment_upload_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pms_attachment_upload_post ...'
      end
      # resource path
      local_var_path = '/pms/attachment-upload'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['id'] = opts[:'id'] if !opts[:'id'].nil?
      form_params['contentType'] = opts[:'content_type'] if !opts[:'content_type'].nil?
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pms_attachment_upload_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @return [TransportResponse]
    def pms_poll_inbox_get(opts = {})
      data, _status_code, _headers = pms_poll_inbox_get_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def pms_poll_inbox_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pms_poll_inbox_get ...'
      end
      # resource path
      local_var_path = '/pms/poll-inbox'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pms_poll_inbox_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [PmsDeferredQueryParameters] :body 
    # @return [TransportResponse]
    def pms_receive_deferred_post(opts = {})
      data, _status_code, _headers = pms_receive_deferred_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PmsDeferredQueryParameters] :body 
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def pms_receive_deferred_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pms_receive_deferred_post ...'
      end
      # resource path
      local_var_path = '/pms/receive-deferred'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pms_receive_deferred_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [OrganizationIdSearchParameters] :body 
    # @return [TransportResponse]
    def pms_registry_search_organization_by_id_post(opts = {})
      data, _status_code, _headers = pms_registry_search_organization_by_id_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [OrganizationIdSearchParameters] :body 
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def pms_registry_search_organization_by_id_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pms_registry_search_organization_by_id_post ...'
      end
      # resource path
      local_var_path = '/pms/registry-search/organization-by-id'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pms_registry_search_organization_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [OrganizationSearchParameters] :body 
    # @return [TransportResponse]
    def pms_registry_search_organization_discrete_post(opts = {})
      data, _status_code, _headers = pms_registry_search_organization_discrete_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [OrganizationSearchParameters] :body 
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def pms_registry_search_organization_discrete_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pms_registry_search_organization_discrete_post ...'
      end
      # resource path
      local_var_path = '/pms/registry-search/organization-discrete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pms_registry_search_organization_discrete_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [OrganizationElasticSearchParameters] :body 
    # @return [TransportResponse]
    def pms_registry_search_organization_elastic_post(opts = {})
      data, _status_code, _headers = pms_registry_search_organization_elastic_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [OrganizationElasticSearchParameters] :body 
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def pms_registry_search_organization_elastic_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pms_registry_search_organization_elastic_post ...'
      end
      # resource path
      local_var_path = '/pms/registry-search/organization-elastic'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pms_registry_search_organization_elastic_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [PractitionerIdSearchParameters] :body 
    # @return [TransportResponse]
    def pms_registry_search_practitioner_by_id_post(opts = {})
      data, _status_code, _headers = pms_registry_search_practitioner_by_id_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PractitionerIdSearchParameters] :body 
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def pms_registry_search_practitioner_by_id_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pms_registry_search_practitioner_by_id_post ...'
      end
      # resource path
      local_var_path = '/pms/registry-search/practitioner-by-id'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pms_registry_search_practitioner_by_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [PractitionerSearchParameters] :body 
    # @return [TransportResponse]
    def pms_registry_search_search_practitioner_discrete_post(opts = {})
      data, _status_code, _headers = pms_registry_search_search_practitioner_discrete_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PractitionerSearchParameters] :body 
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def pms_registry_search_search_practitioner_discrete_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pms_registry_search_search_practitioner_discrete_post ...'
      end
      # resource path
      local_var_path = '/pms/registry-search/search-practitioner-discrete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pms_registry_search_search_practitioner_discrete_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [PractitionerElasticSearchParameters] :body 
    # @return [TransportResponse]
    def pms_registry_search_search_practitioner_elastic_post(opts = {})
      data, _status_code, _headers = pms_registry_search_search_practitioner_elastic_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PractitionerElasticSearchParameters] :body 
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def pms_registry_search_search_practitioner_elastic_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pms_registry_search_search_practitioner_elastic_post ...'
      end
      # resource path
      local_var_path = '/pms/registry-search/search-practitioner-elastic'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pms_registry_search_search_practitioner_elastic_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [TransportResponse]
    def pms_submit_to_inbox_post(opts = {})
      data, _status_code, _headers = pms_submit_to_inbox_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [Array<(TransportResponse, Integer, Hash)>] TransportResponse data, response status code and response headers
    def pms_submit_to_inbox_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pms_submit_to_inbox_post ...'
      end
      # resource path
      local_var_path = '/pms/submit-to-inbox'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'TransportResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pms_submit_to_inbox_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [NotificationMessageIssue]
    def pms_transform_from_xml_notification_post(opts = {})
      data, _status_code, _headers = pms_transform_from_xml_notification_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [Array<(NotificationMessageIssue, Integer, Hash)>] NotificationMessageIssue data, response status code and response headers
    def pms_transform_from_xml_notification_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pms_transform_from_xml_notification_post ...'
      end
      # resource path
      local_var_path = '/pms/transform-from-xml/notification'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'NotificationMessageIssue' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pms_transform_from_xml_notification_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [InboxMessageResponse]
    def pms_transform_from_xml_post(opts = {})
      data, _status_code, _headers = pms_transform_from_xml_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [Array<(InboxMessageResponse, Integer, Hash)>] InboxMessageResponse data, response status code and response headers
    def pms_transform_from_xml_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pms_transform_from_xml_post ...'
      end
      # resource path
      local_var_path = '/pms/transform-from-xml'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'InboxMessageResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pms_transform_from_xml_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [ProviderRegistrySearchResponse]
    def pms_transform_from_xml_search_post(opts = {})
      data, _status_code, _headers = pms_transform_from_xml_search_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [Array<(ProviderRegistrySearchResponse, Integer, Hash)>] ProviderRegistrySearchResponse data, response status code and response headers
    def pms_transform_from_xml_search_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pms_transform_from_xml_search_post ...'
      end
      # resource path
      local_var_path = '/pms/transform-from-xml/search'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'ProviderRegistrySearchResponse' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pms_transform_from_xml_search_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :body 
    # @return [String]
    def pms_transform_to_xml_acknowledgment_post(opts = {})
      data, _status_code, _headers = pms_transform_to_xml_acknowledgment_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :body 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def pms_transform_to_xml_acknowledgment_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pms_transform_to_xml_acknowledgment_post ...'
      end
      # resource path
      local_var_path = '/pms/transform-to-xml/acknowledgment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pms_transform_to_xml_acknowledgment_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [ClinicianCommunication] :body 
    # @return [String]
    def pms_transform_to_xml_clinician_communication_post(opts = {})
      data, _status_code, _headers = pms_transform_to_xml_clinician_communication_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [ClinicianCommunication] :body 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def pms_transform_to_xml_clinician_communication_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pms_transform_to_xml_clinician_communication_post ...'
      end
      # resource path
      local_var_path = '/pms/transform-to-xml/clinician-communication'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pms_transform_to_xml_clinician_communication_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [NotificationMessage] :body 
    # @return [String]
    def pms_transform_to_xml_notification_message_post(opts = {})
      data, _status_code, _headers = pms_transform_to_xml_notification_message_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [NotificationMessage] :body 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def pms_transform_to_xml_notification_message_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pms_transform_to_xml_notification_message_post ...'
      end
      # resource path
      local_var_path = '/pms/transform-to-xml/notification-message'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pms_transform_to_xml_notification_message_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [PmsAdaptRequest] :body 
    # @return [String]
    def pms_transform_to_xml_pms_adapt_request_post(opts = {})
      data, _status_code, _headers = pms_transform_to_xml_pms_adapt_request_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PmsAdaptRequest] :body 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def pms_transform_to_xml_pms_adapt_request_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pms_transform_to_xml_pms_adapt_request_post ...'
      end
      # resource path
      local_var_path = '/pms/transform-to-xml/pms-adapt-request'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pms_transform_to_xml_pms_adapt_request_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [PmsCancelResponse] :body 
    # @return [String]
    def pms_transform_to_xml_pms_cancel_response_post(opts = {})
      data, _status_code, _headers = pms_transform_to_xml_pms_cancel_response_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PmsCancelResponse] :body 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def pms_transform_to_xml_pms_cancel_response_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pms_transform_to_xml_pms_cancel_response_post ...'
      end
      # resource path
      local_var_path = '/pms/transform-to-xml/pms-cancel-response'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pms_transform_to_xml_pms_cancel_response_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [PmsDispenseCancelNotification] :body 
    # @return [String]
    def pms_transform_to_xml_pms_dispense_cancel_notification_post(opts = {})
      data, _status_code, _headers = pms_transform_to_xml_pms_dispense_cancel_notification_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PmsDispenseCancelNotification] :body 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def pms_transform_to_xml_pms_dispense_cancel_notification_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pms_transform_to_xml_pms_dispense_cancel_notification_post ...'
      end
      # resource path
      local_var_path = '/pms/transform-to-xml/pms-dispense-cancel-notification'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pms_transform_to_xml_pms_dispense_cancel_notification_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [PmsDispenseNotification] :body 
    # @return [String]
    def pms_transform_to_xml_pms_dispense_notification_post(opts = {})
      data, _status_code, _headers = pms_transform_to_xml_pms_dispense_notification_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PmsDispenseNotification] :body 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def pms_transform_to_xml_pms_dispense_notification_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pms_transform_to_xml_pms_dispense_notification_post ...'
      end
      # resource path
      local_var_path = '/pms/transform-to-xml/pms-dispense-notification'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pms_transform_to_xml_pms_dispense_notification_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [PmsPrescribeRequest] :body 
    # @return [String]
    def pms_transform_to_xml_pms_prescribe_request_post(opts = {})
      data, _status_code, _headers = pms_transform_to_xml_pms_prescribe_request_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PmsPrescribeRequest] :body 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def pms_transform_to_xml_pms_prescribe_request_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pms_transform_to_xml_pms_prescribe_request_post ...'
      end
      # resource path
      local_var_path = '/pms/transform-to-xml/pms-prescribe-request'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pms_transform_to_xml_pms_prescribe_request_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param [Hash] opts the optional parameters
    # @option opts [PmsRenewalRequest] :body 
    # @return [String]
    def pms_transform_to_xml_pms_renewal_request_post(opts = {})
      data, _status_code, _headers = pms_transform_to_xml_pms_renewal_request_post_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [PmsRenewalRequest] :body 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def pms_transform_to_xml_pms_renewal_request_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.pms_transform_to_xml_pms_renewal_request_post ...'
      end
      # resource path
      local_var_path = '/pms/transform-to-xml/pms-renewal-request'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#pms_transform_to_xml_pms_renewal_request_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
