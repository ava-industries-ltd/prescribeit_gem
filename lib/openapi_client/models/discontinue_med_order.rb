=begin
#PrescribeIT SDK REST API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 5.3.13

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.3.0

=end

require 'date'
require 'time'

module OpenapiClient
  class DiscontinueMedOrder
    attr_accessor :id

    attr_accessor :dosage_instructions

    attr_accessor :medication_info

    attr_accessor :rendered_dosage_instruction

    attr_accessor :dis_ids

    attr_accessor :treatment_type

    attr_accessor :reason_codes

    attr_accessor :note

    attr_accessor :is_high_priority

    attr_accessor :task_id

    attr_accessor :type

    attr_accessor :discontinue_reason

    attr_accessor :discontinue_reason_comment

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'dosage_instructions' => :'dosageInstructions',
        :'medication_info' => :'medicationInfo',
        :'rendered_dosage_instruction' => :'renderedDosageInstruction',
        :'dis_ids' => :'disIds',
        :'treatment_type' => :'treatmentType',
        :'reason_codes' => :'reasonCodes',
        :'note' => :'note',
        :'is_high_priority' => :'isHighPriority',
        :'task_id' => :'taskId',
        :'type' => :'type',
        :'discontinue_reason' => :'discontinueReason',
        :'discontinue_reason_comment' => :'discontinueReasonComment'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Identifier',
        :'dosage_instructions' => :'Array<DosageInstruction>',
        :'medication_info' => :'MedicationInfo',
        :'rendered_dosage_instruction' => :'String',
        :'dis_ids' => :'Array<String>',
        :'treatment_type' => :'PrescriptionTreatmentCategoryHolder',
        :'reason_codes' => :'Array<PrescriptionIndicationForUseHolder>',
        :'note' => :'String',
        :'is_high_priority' => :'Boolean',
        :'task_id' => :'String',
        :'type' => :'String',
        :'discontinue_reason' => :'PrescriptionDiscontinueReasonHolder',
        :'discontinue_reason_comment' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # discriminator's property name in OpenAPI v3
    def self.openapi_discriminator_name
      :'type'
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::DiscontinueMedOrder` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::DiscontinueMedOrder`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'dosage_instructions')
        if (value = attributes[:'dosage_instructions']).is_a?(Array)
          self.dosage_instructions = value
        end
      end

      if attributes.key?(:'medication_info')
        self.medication_info = attributes[:'medication_info']
      else
        self.medication_info = nil
      end

      if attributes.key?(:'rendered_dosage_instruction')
        self.rendered_dosage_instruction = attributes[:'rendered_dosage_instruction']
      else
        self.rendered_dosage_instruction = nil
      end

      if attributes.key?(:'dis_ids')
        if (value = attributes[:'dis_ids']).is_a?(Array)
          self.dis_ids = value
        end
      end

      if attributes.key?(:'treatment_type')
        self.treatment_type = attributes[:'treatment_type']
      end

      if attributes.key?(:'reason_codes')
        if (value = attributes[:'reason_codes']).is_a?(Array)
          self.reason_codes = value
        end
      end

      if attributes.key?(:'note')
        self.note = attributes[:'note']
      end

      if attributes.key?(:'is_high_priority')
        self.is_high_priority = attributes[:'is_high_priority']
      end

      if attributes.key?(:'task_id')
        self.task_id = attributes[:'task_id']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = nil
      end

      if attributes.key?(:'discontinue_reason')
        self.discontinue_reason = attributes[:'discontinue_reason']
      else
        self.discontinue_reason = nil
      end

      if attributes.key?(:'discontinue_reason_comment')
        self.discontinue_reason_comment = attributes[:'discontinue_reason_comment']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @medication_info.nil?
        invalid_properties.push('invalid value for "medication_info", medication_info cannot be nil.')
      end

      if @rendered_dosage_instruction.nil?
        invalid_properties.push('invalid value for "rendered_dosage_instruction", rendered_dosage_instruction cannot be nil.')
      end

      if !@reason_codes.nil? && @reason_codes.length > 5
        invalid_properties.push('invalid value for "reason_codes", number of items must be less than or equal to 5.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @discontinue_reason.nil?
        invalid_properties.push('invalid value for "discontinue_reason", discontinue_reason cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @medication_info.nil?
      return false if @rendered_dosage_instruction.nil?
      return false if !@reason_codes.nil? && @reason_codes.length > 5
      return false if @type.nil?
      return false if @discontinue_reason.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] reason_codes Value to be assigned
    def reason_codes=(reason_codes)
      if reason_codes.nil?
        fail ArgumentError, 'reason_codes cannot be nil'
      end

      if reason_codes.length > 5
        fail ArgumentError, 'invalid value for "reason_codes", number of items must be less than or equal to 5.'
      end

      @reason_codes = reason_codes
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          dosage_instructions == o.dosage_instructions &&
          medication_info == o.medication_info &&
          rendered_dosage_instruction == o.rendered_dosage_instruction &&
          dis_ids == o.dis_ids &&
          treatment_type == o.treatment_type &&
          reason_codes == o.reason_codes &&
          note == o.note &&
          is_high_priority == o.is_high_priority &&
          task_id == o.task_id &&
          type == o.type &&
          discontinue_reason == o.discontinue_reason &&
          discontinue_reason_comment == o.discontinue_reason_comment
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, dosage_instructions, medication_info, rendered_dosage_instruction, dis_ids, treatment_type, reason_codes, note, is_high_priority, task_id, type, discontinue_reason, discontinue_reason_comment].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
